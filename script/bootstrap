#!/usr/bin/env node

var fs = require('fs');
var verifyRequirements = require('./utils/verify-requirements');
var safeExec = require('./utils/child-process-wrapper.js').safeExec;
var path = require('path');

// Executes an array of commands one by one.
function executeCommands(commands, done, index) {
  index = (index == undefined ? 0 : index);
  if (index < commands.length) {
    var command = commands[index];
    if (command.message)
      console.log(command.message);
    var options = null;
    if (typeof command !== 'string') {
      options = command.options;
      command = command.command;
    }
    safeExec(command, options, executeCommands.bind(this, commands, done, index + 1));
  }
  else
    done(null);
}

function bootstrap() {
  /*
  /* Create glue package manager
  var gpmInstallPath = path.resolve(__dirname, '..', 'gpm');
  if (!fs.existsSync(gpmInstallPath))
    fs.mkdirSync(gpmInstallPath);
  if (!fs.existsSync(path.join(gpmInstallPath, 'node_modules')))
    fs.mkdirSync(path.join(gpmInstallPath, 'node_modules'));
  */
  /*
  var gpmPath = path.resolve(__dirname, '..', 'gpm', 'node_modules', 'glue-package-manager', 'bin', 'gpm')
  var gpmFlags = process.env.JANKY_SHA1 || process.argv.indexOf('--no-color') !== -1 ? ' --no-color' : '';
  */

  var npmPath = path.resolve(__dirname, '..', 'build', 'node_modules', '.bin', 'npm');
  var initialNpmCommand = fs.existsSync(npmPath) ? npmPath : 'npm';
  var npmFlags = ' --userconfig=' + path.resolve('.npmrc') + ' ';

  //for gpm
  //var packagesToDedupe = ['fs-plus', 'humanize-plus', 'oniguruma', 'roaster', 'season', 'grim'];

  var buildInstallCommand = initialNpmCommand + npmFlags + 'install';
  var buildInstallOptions = {cwd: path.resolve(__dirname, '..', 'build')};

  //var gpmInstallCommand = npmPath + npmFlags + 'install';
  //var gpmInstallOptions = {cwd: gpmInstallPath};
  //var moduleInstallCommand = gpmPath + ' install' + gpmFlags;

  //var dedupeGpmCommand = gpmPath + ' dedupe' + gpmFlags;
  //#var dedupeNpmCommand = npmPath + npmFlags + 'dedupe';

  if (process.argv.indexOf('--no-quiet') === -1) {
    buildInstallCommand  += ' --loglevel error';
    //dedupeNpmCommand     += ' --quiet';
    buildInstallOptions.ignoreStdout = true;
  }

  // apm ships with 32-bit node so make sure its native modules are compiled
  // for a 32-bit target architecture
  /*
  if (process.env.JANKY_SHA1 && process.platform === 'win32')
    gpmInstallCommand += ' --arch=ia32';

  */
  var commands = [
    //build/package.json
    {
      command: buildInstallCommand,
      message: 'Installing build modules...',
      options: buildInstallOptions
    }
  ];

  process.chdir(path.dirname(__dirname));
  executeCommands(commands, function(){
    console.log("executeCommands Done!");
    process.exit();
  });
}

verifyRequirements(function(error, successMessage) {
  if (error) {
    console.log(error);
    process.exit(1);
  }

  console.log(successMessage);
  bootstrap();
});
